1//logic gates//
module basicgate(a,b,c);
input a;
input b;
output[6:0]c;
and(c[0],a,b);
or(c[1],a,b);
not(c[2],a);
nand(c[3],a,b);
nor(c[4],a,b);
xor(c[5],a,b);
xnor(c[6],a,b);
endmodule

//logic gate testbench//
module gate_tst();
reg a;
reg b;
wire[6:0]c;
basicgate x1(.a(a),.b(b),.c(c));
initial
begin
a=1'b0;
b=1'b0;
#200;
a=1'b0;
b=1'b1;
#200;
a=1'b1;
b=1'b0;
#200;
a=1'b1;
b=1'b1;
end
endmodule


2//half adder//
module half_adder(a,b,sum,carry);
input a,b;
output sum,carry;
assign sum = a^b;
assign carry=a&b;
endmodule

//half adder testbench//
module tb_top;
 reg a, b;
 wire s, c_out;
 half_adder ha(a, b, s, c_out);
 initial begin
 $monitor("At time %0t: a=%b b=%b, sum=%b, carry=%b",$time, a,b,s,c_out);
 a = 0; b = 0;
 #100;
 a = 0; b = 1;
 #100;
 a = 1; b = 0;
 #100;
 a = 1; b = 1;
 end
endmodule


3//full adder//
module full_adder(input a, b, cin, output S, Cout);
 assign S = a ^ b ^ cin;
 assign Cout = (a & b) | (b & cin) | (a & cin);
endmodule

//full adder testbench//
module tb_top;
 reg a, b, c;
 wire s, c_out;
 full_adder fa(a, b, c, s, c_out);
 initial begin
 $monitor("At time %0t: a=%b b=%b, cin=%b, sum=%b, carry=%b",$time,
a,b,c,s,c_out);
 a = 0; b = 0; c = 0; #1;
 a = 0; b = 0; c = 1; #1;
 a = 0; b = 1; c = 0; #1;
 a = 0; b = 1; c = 1; #1;
 a = 1; b = 0; c = 0; #1;
 a = 1; b = 0; c = 1; #1;
 a = 1; b = 1; c = 0; #1;
 a = 1; b = 1; c = 1;
end
endmodule


4//fulladder using halfadder//
module full_adder(a,b,c,sum,carry);
input a,b,c;
output sum,carry;
wire w1,w2,w3;
half_adder HA1(.a(a), .b(b),  .sum(w1), .carry(w2));
half_adder HA2(.a(w1), .b(c), .sum(sum), .carry(w3));
or or1(carry,w2,w3);
endmodule

//fulladder using halfadder testbench//
module full_adder_tb();
reg a,b,cin;
wire sum,carry;
integer i;
full_adder FA1 (.a(a) , .b(b) , .c(cin) , .sum(sum) , .carry(carry));
initial
begin
a=1'b0;
b=1'b0;
cin=1'b0;
end
initial
begin
for(i=0;i<8;i=i+1)
begin
{a,b,cin}=i;
#10;
end
end
initial $monitor("Input a=%b, b=%b, c=%b, Output sum=%b,carry=%b", a,b,cin,sum,carry);
initial #100 $finish;
endmodule


5//ripple carry adder//
module full_adder(
 input a, b, cin,
 output sum, cout);
 assign {sum, cout} = {a^b^cin, ((a & b) | (b & cin) | (a & cin))};
 //or
 //assign sum = a^b^cin;
 //assign cout = (a & b) | (b & cin) | (a & cin);
endmodule
module ripple_carry_adder #(parameter SIZE = 10) (
 input [SIZE-1:0] A, B,
 input Cin,
 output [SIZE-1:0] S, Cout);
 genvar g;
 full_adder fa0(A[0], B[0], Cin, S[0], Cout[0]);
 generate // This will instantiate full_adder SIZE-1 times
 for(g = 1; g<SIZE; g=g+1) begin
 full_adder fa(A[g], B[g], Cout[g-1], S[g], Cout[g]);
 end
 endgenerate
endmodule

//ripple carry adder testbench//
module RCA_TB;
 wire [3:0] S, Cout;
 reg [3:0] A, B;
 reg Cin;
 wire[4:0] add;
 ripple_carry_adder rca(A, B, Cin, S, Cout);
 assign add = {Cout[3], S};
 initial begin
 $monitor("A = %b: B = %b, Cin = %b --> S = %b, Cout[3] = %b, Addition =%0d"
, A, B, Cin, S, Cout[3], add);
 A = 1; B = 0; Cin = 0; #3;
 A = 2; B = 4; Cin = 1; #3;
 A = 4'hb; B = 4'h6; Cin = 0; #3;
 A = 5; B = 3; Cin = 1; #3;
 $finish;
 end
 initial begin
 $dumpfile("waves.vcd");
 $dumpvars;
 end
endmodule


6//2:1mux//
module mux_2_1(
 input sel,
 input i0, i1,
 output y);
 assign y = sel ? i1 : i0;
endmodule

//2:1mux testbench//
module mux_tb;
 reg i0, i1, sel;
 wire y;
 mux_2_1 mux(sel, i0, i1, y);
 initial begin
 $monitor("sel = %h: i0 = %h, i1 = %h --> y = %h", sel, i0, i1, y);
 i0 = 0; i1 = 1;
 sel = 0;
 #1;
 sel = 1;
 end
endmodule


7//4:1 mux//
module mux_example(
 input [1:0] sel,
 input i0,i1,i2,i3,
 output reg y);
 always @(*) begin
 case(sel)
 2'h0: y = i0;
 2'h1: y = i1;
 2'h2: y = i2;
 2'h3: y = i3;
 default: $display("Invalid sel input");
 endcase
 end
endmodule

//4:1 mux testbench//
module tb;
 reg [1:0] sel;
 reg i0,i1,i2,i3;
 wire y;
 mux_example mux(sel, i0, i1, i2, i3, y);
 initial begin
 $monitor("sel = %b -> i3 = %0b, i2 = %0b ,i1 = %0b, i0 = %0b -> y = %0b",
sel,i3,i2,i1,i0, y);
 {i3,i2,i1,i0} = 4'h5;
 repeat(6) begin
 sel = $random;
 #5;
 end
 end
endmodule
